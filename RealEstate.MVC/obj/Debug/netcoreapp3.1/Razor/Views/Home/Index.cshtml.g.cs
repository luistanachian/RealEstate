#pragma checksum "C:\Users\dev\Desktop\netCore\gitApp\realestate\RealEstate.MVC\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c645c9c944c3fc09b38b9bf4b957d28ae4039b82"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c645c9c944c3fc09b38b9bf4b957d28ae4039b82", @"/Views/Home/Index.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<style>
    * {
        box-sizing: border-box;
    }

    body {
        font: 16px Arial;
    }

    .autocomplete {
        /*the container must be positioned relative:*/
        position: relative;
        display: inline-block;
    }

    input {
        border: 1px solid transparent;
        background-color: #f1f1f1;
        padding: 10px;
        font-size: 16px;
    }

        input[type=text] {
            background-color: #f1f1f1;
            width: 100%;
        }

        input[type=submit] {
            background-color: DodgerBlue;
            color: #fff;
        }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

        .autocomplete-items div {
            padding: 10px;
            curs");
            WriteLiteral(@"or: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            .autocomplete-items div:hover {
                /*when hovering an item:*/
                background-color: #e9e9e9;
            }

    .autocomplete-active {
        /*when navigating through the items using the arrow keys:*/
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>

<form autocomplete=""off"">
    <div class=""autocomplete"" style=""width:300px;"">
        <input id=""myInput"" type=""text"" name=""searchLocation"" placeholder=""Location"" />
    </div>
</form>

<script>
    //document.getElementById(""demo"").addEventListener(""keypress"", myFunction);
    var idLocation = null;

    //function myFunction() {
    //    if (document.getElementById(""demo"").value.length > 0) {

    //        var xhr = new XMLHttpRequest();
    //        xhr.open(""GET"", ""/location/search/"" + document.getElementById(""demo"").value, true);
    //       ");
            WriteLiteral(@" xhr.onload = function (e) {
    //            if (xhr.readyState === 4) {
    //                if (xhr.status === 200) {
    //                    return xhr.responseText;
    //                } else {
    //                    console.error(xhr.statusText);
    //                    return null;
    //                }
    //            }
    //        };
    //        xhr.onerror = function (e) {
    //            console.error(xhr.statusText);
    //            return null;
    //        };
    //        xhr.send(null);
    //    }

        function autocomplete(inp) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener(""input"", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted v");
            WriteLiteral(@"alues*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement(""DIV"");
                a.setAttribute(""id"", this.id + ""autocomplete-list"");
                a.setAttribute(""class"", ""autocomplete-items"");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);




                if (inp.value.length == 0) {
                    closeAllLists();
                }
                else {

                    var xhr = new XMLHttpRequest();
                    xhr.open(""GET"", ""/location/search/"" + inp.value, true);
                    xhr.onload = function (e) {
                        if (xhr.readyState === 4) {
                            if (xhr.status === 200) {
                                var jsonResponse = JSON.parse(xhr.responseT");
            WriteLiteral(@"ext);
                                console.log(jsonResponse);

                                for (i = 0; i < jsonResponse.length; i++) {
                                    b = document.createElement(""DIV"");
                                    b.innerHTML = jsonResponse[i].texto;
                                    b.innerHTML += ""<input type='hidden' value='"" + jsonResponse[i].id + ""'>"";
                                    b.innerHTML += ""<input type='hidden' value='"" + jsonResponse[i].texto + ""'>"";
                                    b.addEventListener(""click"", function (e) {
                                        idLocation = this.getElementsByTagName(""input"")[0].value;
                                        inp.value = this.getElementsByTagName(""input"")[1].value;
                                        closeAllLists();
                                    });
                                    a.appendChild(b);
                                }
                            } else {
 ");
            WriteLiteral(@"                               console.error(xhr.statusText);
                            }
                        }
                    };
                    xhr.onerror = function (e) {
                        console.error(xhr.statusText);
                    };
                    xhr.send(null);
                }


                ///*for each item in the array...*/
                //for (i = 0; i < arr.length; i++) {
                //    /*check if the item starts with the same letters as the text field value:*/
                //    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                //        /*create a DIV element for each matching element:*/
                //        b = document.createElement(""DIV"");
                //        /*make the matching letters bold:*/
                //        b.innerHTML = ""<strong>"" + arr[i].substr(0, val.length) + ""</strong>"";
                //        b.innerHTML += arr[i].substr(val.length);
                //");
            WriteLiteral(@"        /*insert a input field that will hold the current array item's value:*/
                //        b.innerHTML += ""<input type='hidden' value='"" + arr[i] + ""'>"";
                //        /*execute a function when someone clicks on the item value (DIV element):*/
                //        b.addEventListener(""click"", function (e) {
                //            /*insert the value for the autocomplete text field:*/
                //            inp.value = this.getElementsByTagName(""input"")[0].value;
                //            /*close the list of autocompleted values,
                //            (or any other open lists of autocompleted values:*/
                //            closeAllLists();
                //        });
                //        a.appendChild(b);
                //    }
                //}




            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener(""keydown"", function (e) {
                var x = docum");
            WriteLiteral(@"ent.getElementById(this.id + ""autocomplete-list"");
                if (x) x = x.getElementsByTagName(""div"");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the ""active"" item:*/
          ");
            WriteLiteral(@"              if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as ""active"":*/
                if (!x) return false;
                /*start by removing the ""active"" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class ""autocomplete-active"":*/
                x[currentFocus].classList.add(""autocomplete-active"");
            }
            function removeActive(x) {
                /*a function to remove the ""active"" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove(""autocomplete-active"");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
 ");
            WriteLiteral(@"               except the one passed as an argument:*/
                var x = document.getElementsByClassName(""autocomplete-items"");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener(""click"", function (e) {
                closeAllLists(e.target);
            });
        }



        autocomplete(document.getElementById(""myInput""));
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
